{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3136,"databundleVersionId":26502,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/zeinabsalem/taitanic?scriptVersionId=238588776\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:19:58.002499Z","iopub.execute_input":"2025-05-08T14:19:58.00283Z","iopub.status.idle":"2025-05-08T14:20:00.172313Z","shell.execute_reply.started":"2025-05-08T14:19:58.002799Z","shell.execute_reply":"2025-05-08T14:20:00.171415Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"code","source":"# Ignore Warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\nprint ('modules loaded')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:00.173236Z","iopub.execute_input":"2025-05-08T14:20:00.173722Z","iopub.status.idle":"2025-05-08T14:20:00.179415Z","shell.execute_reply.started":"2025-05-08T14:20:00.173696Z","shell.execute_reply":"2025-05-08T14:20:00.178317Z"}},"outputs":[{"name":"stdout","text":"modules loaded\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# *Load the Data*","metadata":{}},{"cell_type":"code","source":"import pandas as pd  \ndf = pd.read_csv('/kaggle/input/titanic/train.csv')  \ndf.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:00.181706Z","iopub.execute_input":"2025-05-08T14:20:00.1827Z","iopub.status.idle":"2025-05-08T14:20:00.266204Z","shell.execute_reply.started":"2025-05-08T14:20:00.182661Z","shell.execute_reply":"2025-05-08T14:20:00.265283Z"}},"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":3},{"cell_type":"markdown","source":"# *Exploratory Data Analysis (EDA)*","metadata":{}},{"cell_type":"code","source":"df.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:00.267193Z","iopub.execute_input":"2025-05-08T14:20:00.267574Z","iopub.status.idle":"2025-05-08T14:20:00.29266Z","shell.execute_reply.started":"2025-05-08T14:20:00.267543Z","shell.execute_reply":"2025-05-08T14:20:00.291789Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 12 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Name         891 non-null    object \n 4   Sex          891 non-null    object \n 5   Age          714 non-null    float64\n 6   SibSp        891 non-null    int64  \n 7   Parch        891 non-null    int64  \n 8   Ticket       891 non-null    object \n 9   Fare         891 non-null    float64\n 10  Cabin        204 non-null    object \n 11  Embarked     889 non-null    object \ndtypes: float64(2), int64(5), object(5)\nmemory usage: 83.7+ KB\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"df.describe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:00.29357Z","iopub.execute_input":"2025-05-08T14:20:00.293877Z","iopub.status.idle":"2025-05-08T14:20:00.322933Z","shell.execute_reply.started":"2025-05-08T14:20:00.293855Z","shell.execute_reply":"2025-05-08T14:20:00.322107Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"       PassengerId    Survived      Pclass         Age       SibSp  \\\ncount   891.000000  891.000000  891.000000  714.000000  891.000000   \nmean    446.000000    0.383838    2.308642   29.699118    0.523008   \nstd     257.353842    0.486592    0.836071   14.526497    1.102743   \nmin       1.000000    0.000000    1.000000    0.420000    0.000000   \n25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n75%     668.500000    1.000000    3.000000   38.000000    1.000000   \nmax     891.000000    1.000000    3.000000   80.000000    8.000000   \n\n            Parch        Fare  \ncount  891.000000  891.000000  \nmean     0.381594   32.204208  \nstd      0.806057   49.693429  \nmin      0.000000    0.000000  \n25%      0.000000    7.910400  \n50%      0.000000   14.454200  \n75%      0.000000   31.000000  \nmax      6.000000  512.329200  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Fare</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>714.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n      <td>891.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>446.000000</td>\n      <td>0.383838</td>\n      <td>2.308642</td>\n      <td>29.699118</td>\n      <td>0.523008</td>\n      <td>0.381594</td>\n      <td>32.204208</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>257.353842</td>\n      <td>0.486592</td>\n      <td>0.836071</td>\n      <td>14.526497</td>\n      <td>1.102743</td>\n      <td>0.806057</td>\n      <td>49.693429</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>223.500000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>20.125000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>7.910400</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>446.000000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>28.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>14.454200</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>668.500000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>38.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>31.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>891.000000</td>\n      <td>1.000000</td>\n      <td>3.000000</td>\n      <td>80.000000</td>\n      <td>8.000000</td>\n      <td>6.000000</td>\n      <td>512.329200</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"markdown","source":"# *Visualizations*","metadata":{}},{"cell_type":"code","source":"import seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:00.323912Z","iopub.execute_input":"2025-05-08T14:20:00.324167Z","iopub.status.idle":"2025-05-08T14:20:02.033071Z","shell.execute_reply.started":"2025-05-08T14:20:00.324146Z","shell.execute_reply":"2025-05-08T14:20:02.032123Z"}},"outputs":[],"execution_count":6},{"cell_type":"code","source":"sns.countplot(x='Survived', data=df)\nplt.title('Survived (0 = No, 1 = Yes)')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:02.034103Z","iopub.execute_input":"2025-05-08T14:20:02.034607Z","iopub.status.idle":"2025-05-08T14:20:02.297008Z","shell.execute_reply.started":"2025-05-08T14:20:02.034573Z","shell.execute_reply":"2025-05-08T14:20:02.296015Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Survived (0 = No, 1 = Yes)')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"sns.countplot(x='Sex', hue='Survived', data=df)\nplt.title('Survival by Gender')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:02.298147Z","iopub.execute_input":"2025-05-08T14:20:02.298475Z","iopub.status.idle":"2025-05-08T14:20:02.667979Z","shell.execute_reply.started":"2025-05-08T14:20:02.298447Z","shell.execute_reply":"2025-05-08T14:20:02.667151Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Survival by Gender')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"sns.countplot(x='Pclass', hue='Survived', data=df)\nplt.title('Survival by Passenger Class')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:02.672303Z","iopub.execute_input":"2025-05-08T14:20:02.672704Z","iopub.status.idle":"2025-05-08T14:20:02.920842Z","shell.execute_reply.started":"2025-05-08T14:20:02.672673Z","shell.execute_reply":"2025-05-08T14:20:02.919772Z"}},"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Survival by Passenger Class')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":9},{"cell_type":"code","source":"sns.histplot(data=df, x='Age', hue='Survived', multiple='stack')\nplt.title('Age Distribution by Survival')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:02.922005Z","iopub.execute_input":"2025-05-08T14:20:02.922366Z","iopub.status.idle":"2025-05-08T14:20:03.336589Z","shell.execute_reply.started":"2025-05-08T14:20:02.922338Z","shell.execute_reply":"2025-05-08T14:20:03.335682Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Age Distribution by Survival')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"sns.boxplot(x='Pclass', y='Age', data=df)\nplt.title('Passenger Age by Class')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.337899Z","iopub.execute_input":"2025-05-08T14:20:03.338283Z","iopub.status.idle":"2025-05-08T14:20:03.556084Z","shell.execute_reply.started":"2025-05-08T14:20:03.338252Z","shell.execute_reply":"2025-05-08T14:20:03.555107Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"Text(0.5, 1.0, 'Passenger Age by Class')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"# *Data Preprocessing*","metadata":{}},{"cell_type":"markdown","source":"**Check missing values**","metadata":{}},{"cell_type":"code","source":"df.isnull().sum()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.557318Z","iopub.execute_input":"2025-05-08T14:20:03.558124Z","iopub.status.idle":"2025-05-08T14:20:03.568449Z","shell.execute_reply.started":"2025-05-08T14:20:03.558093Z","shell.execute_reply":"2025-05-08T14:20:03.567227Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"PassengerId      0\nSurvived         0\nPclass           0\nName             0\nSex              0\nAge            177\nSibSp            0\nParch            0\nTicket           0\nFare             0\nCabin          687\nEmbarked         2\ndtype: int64"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"# **Handle missing values**","metadata":{}},{"cell_type":"code","source":"df['Age'].fillna(df['Age'].median(),inplace = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.56991Z","iopub.execute_input":"2025-05-08T14:20:03.57113Z","iopub.status.idle":"2025-05-08T14:20:03.58482Z","shell.execute_reply.started":"2025-05-08T14:20:03.571089Z","shell.execute_reply":"2025-05-08T14:20:03.583713Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"df['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.585869Z","iopub.execute_input":"2025-05-08T14:20:03.586203Z","iopub.status.idle":"2025-05-08T14:20:03.604379Z","shell.execute_reply.started":"2025-05-08T14:20:03.586176Z","shell.execute_reply":"2025-05-08T14:20:03.603359Z"}},"outputs":[],"execution_count":14},{"cell_type":"code","source":"df.drop(['Cabin', 'Ticket','Name'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.60553Z","iopub.execute_input":"2025-05-08T14:20:03.605887Z","iopub.status.idle":"2025-05-08T14:20:03.626425Z","shell.execute_reply.started":"2025-05-08T14:20:03.605853Z","shell.execute_reply":"2025-05-08T14:20:03.625397Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.627385Z","iopub.execute_input":"2025-05-08T14:20:03.627675Z","iopub.status.idle":"2025-05-08T14:20:03.648253Z","shell.execute_reply.started":"2025-05-08T14:20:03.627648Z","shell.execute_reply":"2025-05-08T14:20:03.647243Z"}},"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"PassengerId    0\nSurvived       0\nPclass         0\nSex            0\nAge            0\nSibSp          0\nParch          0\nFare           0\nEmbarked       0\ndtype: int64"},"metadata":{}}],"execution_count":16},{"cell_type":"markdown","source":"# *Encode categorical columns*","metadata":{}},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\nle = LabelEncoder()\n\ndf['Sex'] = le.fit_transform(df['Sex'])  # Male=1, Female=0\ndf['Embarked'] = le.fit_transform(df['Embarked'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.64995Z","iopub.execute_input":"2025-05-08T14:20:03.650297Z","iopub.status.idle":"2025-05-08T14:20:03.756132Z","shell.execute_reply.started":"2025-05-08T14:20:03.650265Z","shell.execute_reply":"2025-05-08T14:20:03.755041Z"}},"outputs":[],"execution_count":17},{"cell_type":"code","source":"df.info()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.75723Z","iopub.execute_input":"2025-05-08T14:20:03.757579Z","iopub.status.idle":"2025-05-08T14:20:03.772544Z","shell.execute_reply.started":"2025-05-08T14:20:03.757549Z","shell.execute_reply":"2025-05-08T14:20:03.770982Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 891 entries, 0 to 890\nData columns (total 9 columns):\n #   Column       Non-Null Count  Dtype  \n---  ------       --------------  -----  \n 0   PassengerId  891 non-null    int64  \n 1   Survived     891 non-null    int64  \n 2   Pclass       891 non-null    int64  \n 3   Sex          891 non-null    int64  \n 4   Age          891 non-null    float64\n 5   SibSp        891 non-null    int64  \n 6   Parch        891 non-null    int64  \n 7   Fare         891 non-null    float64\n 8   Embarked     891 non-null    int64  \ndtypes: float64(2), int64(7)\nmemory usage: 62.8 KB\n","output_type":"stream"}],"execution_count":18},{"cell_type":"markdown","source":"**All the df is numric**","metadata":{}},{"cell_type":"markdown","source":"# *Split the dataset into train and test*","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX = df.drop('Survived', axis=1)\ny = df['Survived']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.773846Z","iopub.execute_input":"2025-05-08T14:20:03.774784Z","iopub.status.idle":"2025-05-08T14:20:03.913538Z","shell.execute_reply.started":"2025-05-08T14:20:03.774751Z","shell.execute_reply":"2025-05-08T14:20:03.912512Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"# *Train models*","metadata":{}},{"cell_type":"markdown","source":"**Logistic Regression**","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nlog_model = LogisticRegression(max_iter=1000)\nlog_model.fit(X_train, y_train)\nlog_preds = log_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:03.91516Z","iopub.execute_input":"2025-05-08T14:20:03.915486Z","iopub.status.idle":"2025-05-08T14:20:05.792583Z","shell.execute_reply.started":"2025-05-08T14:20:03.915461Z","shell.execute_reply":"2025-05-08T14:20:05.789398Z"}},"outputs":[],"execution_count":20},{"cell_type":"markdown","source":"**Decision Tree Classifier**","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\ntree_model = DecisionTreeClassifier()\ntree_model.fit(X_train, y_train)\ntree_preds = tree_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:05.793507Z","iopub.execute_input":"2025-05-08T14:20:05.797327Z","iopub.status.idle":"2025-05-08T14:20:06.026445Z","shell.execute_reply.started":"2025-05-08T14:20:05.797285Z","shell.execute_reply":"2025-05-08T14:20:06.025379Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"**Random Forest Classifier**","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nrf_model = RandomForestClassifier(n_estimators=100, random_state=42)\nrf_model.fit(X_train, y_train)\nrf_preds = rf_model.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:06.027918Z","iopub.execute_input":"2025-05-08T14:20:06.028259Z","iopub.status.idle":"2025-05-08T14:20:06.358583Z","shell.execute_reply.started":"2025-05-08T14:20:06.028237Z","shell.execute_reply":"2025-05-08T14:20:06.357852Z"}},"outputs":[],"execution_count":22},{"cell_type":"markdown","source":"*** Gradient Boosting ***","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingClassifier\n\ngb_model = GradientBoostingClassifier()\ngb_model.fit(X_train, y_train)\ngb_preds = gb_model.predict(X_test)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:20:52.412261Z","iopub.execute_input":"2025-05-08T14:20:52.413641Z","iopub.status.idle":"2025-05-08T14:20:52.571865Z","shell.execute_reply.started":"2025-05-08T14:20:52.413591Z","shell.execute_reply":"2025-05-08T14:20:52.570568Z"}},"outputs":[],"execution_count":24},{"cell_type":"markdown","source":"# *Evaluate Models*","metadata":{}},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n\n\n\ndef evaluate_model(name, y_test, predictions):\n    print(f\"--- {name} ---\")\n    print(\"Accuracy :\", accuracy_score(y_test, predictions))\n    print(\"Precision:\", precision_score(y_test, predictions))\n    print(\"Recall   :\", recall_score(y_test, predictions))\n    print(\"F1 Score :\", f1_score(y_test, predictions))\n    print(\"\\n\")\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:21:00.522488Z","iopub.execute_input":"2025-05-08T14:21:00.522921Z","iopub.status.idle":"2025-05-08T14:21:00.530295Z","shell.execute_reply.started":"2025-05-08T14:21:00.52289Z","shell.execute_reply":"2025-05-08T14:21:00.52918Z"}},"outputs":[],"execution_count":25},{"cell_type":"code","source":"evaluate_model(\"Logistic Regression\", y_test, log_preds)\nevaluate_model(\"Decision Tree\", y_test, tree_preds)\nevaluate_model(\"Random Forest\", y_test, rf_preds)\nevaluate_model(\"Gradient Boosting\", y_test, gb_preds)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:21:06.551602Z","iopub.execute_input":"2025-05-08T14:21:06.552086Z","iopub.status.idle":"2025-05-08T14:21:06.593469Z","shell.execute_reply.started":"2025-05-08T14:21:06.552027Z","shell.execute_reply":"2025-05-08T14:21:06.592244Z"}},"outputs":[{"name":"stdout","text":"--- Logistic Regression ---\nAccuracy : 0.8100558659217877\nPrecision: 0.7857142857142857\nRecall   : 0.7432432432432432\nF1 Score : 0.7638888888888888\n\n\n--- Decision Tree ---\nAccuracy : 0.7597765363128491\nPrecision: 0.7123287671232876\nRecall   : 0.7027027027027027\nF1 Score : 0.7074829931972789\n\n\n--- Random Forest ---\nAccuracy : 0.8268156424581006\nPrecision: 0.8208955223880597\nRecall   : 0.7432432432432432\nF1 Score : 0.7801418439716312\n\n\n--- Gradient Boosting ---\nAccuracy : 0.8212290502793296\nPrecision: 0.8181818181818182\nRecall   : 0.7297297297297297\nF1 Score : 0.7714285714285715\n\n\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"results = []\n\nmodels = [\n    (\"Logistic Regression\", log_preds),\n    (\"Decision Tree\", tree_preds),\n    (\"Random Forest\", rf_preds),\n    (\"Gradiant Boosting\",gb_preds)\n]\n\nfor name, preds in models:\n    results.append({\n        \"Model\": name,\n        \"Accuracy\": accuracy_score(y_test, preds),\n        \"Precision\": precision_score(y_test, preds),\n        \"Recall\": recall_score(y_test, preds),\n        \"F1 Score\": f1_score(y_test, preds)\n    })\n\n# نحولهم لجدول\nresults_df = pd.DataFrame(results)\nresults_df = results_df.sort_values(by=\"F1 Score\", ascending=False)  # نرتب حسب الأفضل\nresults_df","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:21:19.851461Z","iopub.execute_input":"2025-05-08T14:21:19.851835Z","iopub.status.idle":"2025-05-08T14:21:19.893162Z","shell.execute_reply.started":"2025-05-08T14:21:19.85181Z","shell.execute_reply":"2025-05-08T14:21:19.892096Z"}},"outputs":[{"execution_count":27,"output_type":"execute_result","data":{"text/plain":"                 Model  Accuracy  Precision    Recall  F1 Score\n2        Random Forest  0.826816   0.820896  0.743243  0.780142\n3    Gradiant Boosting  0.821229   0.818182  0.729730  0.771429\n0  Logistic Regression  0.810056   0.785714  0.743243  0.763889\n1        Decision Tree  0.759777   0.712329  0.702703  0.707483","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Model</th>\n      <th>Accuracy</th>\n      <th>Precision</th>\n      <th>Recall</th>\n      <th>F1 Score</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2</th>\n      <td>Random Forest</td>\n      <td>0.826816</td>\n      <td>0.820896</td>\n      <td>0.743243</td>\n      <td>0.780142</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Gradiant Boosting</td>\n      <td>0.821229</td>\n      <td>0.818182</td>\n      <td>0.729730</td>\n      <td>0.771429</td>\n    </tr>\n    <tr>\n      <th>0</th>\n      <td>Logistic Regression</td>\n      <td>0.810056</td>\n      <td>0.785714</td>\n      <td>0.743243</td>\n      <td>0.763889</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Decision Tree</td>\n      <td>0.759777</td>\n      <td>0.712329</td>\n      <td>0.702703</td>\n      <td>0.707483</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":27},{"cell_type":"code","source":"best_model = RandomForestClassifier()\nbest_model.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:32:39.685984Z","iopub.execute_input":"2025-05-08T14:32:39.68636Z","iopub.status.idle":"2025-05-08T14:32:39.90056Z","shell.execute_reply.started":"2025-05-08T14:32:39.686338Z","shell.execute_reply":"2025-05-08T14:32:39.899446Z"}},"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":30},{"cell_type":"code","source":"test_df = pd.read_csv(\"/kaggle/input/titanic/test.csv\")\ntest_df.drop(['Cabin', 'Ticket','Name'], axis=1, inplace=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:39:49.623794Z","iopub.execute_input":"2025-05-08T14:39:49.624164Z","iopub.status.idle":"2025-05-08T14:39:49.636018Z","shell.execute_reply.started":"2025-05-08T14:39:49.62414Z","shell.execute_reply":"2025-05-08T14:39:49.634882Z"}},"outputs":[],"execution_count":36},{"cell_type":"code","source":"test_df['Age'].fillna(test_df['Age'].median(),inplace = True)\ntest_df['Embarked'].fillna(test_df['Embarked'].mode()[0], inplace=True)\ntest_df['Fare'].fillna(test_df['Fare'].median(),inplace = True)\ntest_df['Sex'] = le.fit_transform(test_df['Sex'])  # Male=1, Female=0\ntest_df['Embarked'] = le.fit_transform(test_df['Embarked'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:46:27.816301Z","iopub.execute_input":"2025-05-08T14:46:27.816682Z","iopub.status.idle":"2025-05-08T14:46:27.82861Z","shell.execute_reply.started":"2025-05-08T14:46:27.816656Z","shell.execute_reply":"2025-05-08T14:46:27.827394Z"}},"outputs":[],"execution_count":45},{"cell_type":"code","source":"test_df.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:46:30.469292Z","iopub.execute_input":"2025-05-08T14:46:30.469635Z","iopub.status.idle":"2025-05-08T14:46:30.478558Z","shell.execute_reply.started":"2025-05-08T14:46:30.469612Z","shell.execute_reply":"2025-05-08T14:46:30.477588Z"}},"outputs":[{"execution_count":46,"output_type":"execute_result","data":{"text/plain":"PassengerId    0\nPclass         0\nSex            0\nAge            0\nSibSp          0\nParch          0\nFare           0\nEmbarked       0\ndtype: int64"},"metadata":{}}],"execution_count":46},{"cell_type":"code","source":"predictions = best_model.predict(test_df)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:46:32.697664Z","iopub.execute_input":"2025-05-08T14:46:32.697962Z","iopub.status.idle":"2025-05-08T14:46:32.71616Z","shell.execute_reply.started":"2025-05-08T14:46:32.697941Z","shell.execute_reply":"2025-05-08T14:46:32.715143Z"}},"outputs":[],"execution_count":47},{"cell_type":"code","source":"submission = pd.DataFrame({\n    'PassengerId': test_df['PassengerId'],\n    'Survived': predictions\n})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T14:46:39.876433Z","iopub.execute_input":"2025-05-08T14:46:39.876762Z","iopub.status.idle":"2025-05-08T14:46:39.889688Z","shell.execute_reply.started":"2025-05-08T14:46:39.87674Z","shell.execute_reply":"2025-05-08T14:46:39.888448Z"}},"outputs":[],"execution_count":48},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}